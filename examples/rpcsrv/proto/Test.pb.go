// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Test.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InParam struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InParam) Reset()         { *m = InParam{} }
func (m *InParam) String() string { return proto.CompactTextString(m) }
func (*InParam) ProtoMessage()    {}
func (*InParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d72138f86b68d38, []int{0}
}

func (m *InParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InParam.Unmarshal(m, b)
}
func (m *InParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InParam.Marshal(b, m, deterministic)
}
func (m *InParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InParam.Merge(m, src)
}
func (m *InParam) XXX_Size() int {
	return xxx_messageInfo_InParam.Size(m)
}
func (m *InParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InParam.DiscardUnknown(m)
}

var xxx_messageInfo_InParam proto.InternalMessageInfo

func (m *InParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type OutParam struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutParam) Reset()         { *m = OutParam{} }
func (m *OutParam) String() string { return proto.CompactTextString(m) }
func (*OutParam) ProtoMessage()    {}
func (*OutParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d72138f86b68d38, []int{1}
}

func (m *OutParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutParam.Unmarshal(m, b)
}
func (m *OutParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutParam.Marshal(b, m, deterministic)
}
func (m *OutParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutParam.Merge(m, src)
}
func (m *OutParam) XXX_Size() int {
	return xxx_messageInfo_OutParam.Size(m)
}
func (m *OutParam) XXX_DiscardUnknown() {
	xxx_messageInfo_OutParam.DiscardUnknown(m)
}

var xxx_messageInfo_OutParam proto.InternalMessageInfo

func (m *OutParam) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*InParam)(nil), "examples.proto.InParam")
	proto.RegisterType((*OutParam)(nil), "examples.proto.OutParam")
}

func init() { proto.RegisterFile("Test.proto", fileDescriptor_7d72138f86b68d38) }

var fileDescriptor_7d72138f86b68d38 = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4b, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x2d,
	0x86, 0xf0, 0x95, 0xe4, 0xb9, 0xd8, 0x3d, 0xf3, 0x02, 0x12, 0x8b, 0x12, 0x73, 0x85, 0x44, 0xb8,
	0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25,
	0x19, 0x2e, 0x0e, 0xff, 0xd2, 0x12, 0x88, 0x0a, 0x01, 0x2e, 0xe6, 0xdc, 0xe2, 0x74, 0xa8, 0x3c,
	0x88, 0x69, 0xe4, 0xcc, 0xc5, 0x02, 0x32, 0x5c, 0xc8, 0x9a, 0x8b, 0xc5, 0xb5, 0x22, 0x35, 0x59,
	0x48, 0x5c, 0x0f, 0xd5, 0x7c, 0x3d, 0xa8, 0xe1, 0x52, 0x12, 0xe8, 0x12, 0x30, 0x43, 0x95, 0x18,
	0x8c, 0x9c, 0xb9, 0x58, 0x3d, 0x52, 0x73, 0x72, 0xf2, 0x85, 0xac, 0xb8, 0x98, 0x83, 0x13, 0x2b,
	0xc9, 0x32, 0xc4, 0x89, 0x2b, 0x8a, 0x43, 0x4f, 0x4f, 0x1f, 0x2c, 0x9c, 0xc4, 0x06, 0xa6, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0x04, 0xf1, 0x17, 0xf9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestClient interface {
	// gw: GET "/server-rpc/test/exec"
	Exec(ctx context.Context, in *InParam, opts ...grpc.CallOption) (*OutParam, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) Exec(ctx context.Context, in *InParam, opts ...grpc.CallOption) (*OutParam, error) {
	out := new(OutParam)
	err := c.cc.Invoke(ctx, "/examples.proto.Test/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServer is the server API for Test service.
type TestServer interface {
	// gw: GET "/server-rpc/test/exec"
	Exec(context.Context, *InParam) (*OutParam, error)
}

// UnimplementedTestServer can be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (*UnimplementedTestServer) Exec(ctx context.Context, req *InParam) (*OutParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.proto.Test/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Exec(ctx, req.(*InParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.proto.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Test_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Test.proto",
}

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	// gw: POST "/server-rpc/hello/say"
	Say(ctx context.Context, in *InParam, opts ...grpc.CallOption) (*OutParam, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Say(ctx context.Context, in *InParam, opts ...grpc.CallOption) (*OutParam, error) {
	out := new(OutParam)
	err := c.cc.Invoke(ctx, "/examples.proto.Hello/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	// gw: POST "/server-rpc/hello/say"
	Say(context.Context, *InParam) (*OutParam, error)
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) Say(ctx context.Context, req *InParam) (*OutParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.proto.Hello/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Say(ctx, req.(*InParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.proto.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Hello_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Test.proto",
}
